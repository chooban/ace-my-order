import Button from '@material-ui/core/Button'
import Paper from '@material-ui/core/Paper'
import AssignmentIcon from '@material-ui/icons/Assignment'
import DeleteIcon from '@material-ui/icons/Delete'
import { createStyles,WithStyles, withStyles } from '@material-ui/styles'
import React from 'react'
import { useHistory } from "react-router"
import { Link } from 'react-router-dom'

import { useOrder } from '../contexts/order-context'
import { useClipboard } from '../hooks/'
import { formatAsGBP } from './lib/format-as-gbp'

const styles = (theme:any) => {
  return createStyles({
    root: {
      width: '100%',
      height: '100%',
      padding: '0.5em',
    },
    cartTable: {
      display: 'table',
      width: '100%',
      maxWidth: '600px',
      marginBottom: '1em',
      '&>div:first-of-type': {
        display: 'table-row',
        '& div': {
          display: 'table-cell',
          verticalAlign: 'middle',
          fontWeight: 'bold'
        }
      },
      '& div': {
        display: 'table-row',
        '& div': {
          display: 'table-cell',
          verticalAlign: 'middle'
        }
      }
    },
    buttonRow: {
      display: 'flex',
      flexDirection: 'row',
      '&>*:nth-of-type(2)': {
        margin: '0 5px'
      }
    },
    deleteIcon: {
      '&:hover': {
        cursor: 'pointer'
      }
    },
    copyIcon: {
      position: 'relative',
      top: '3px',
      fontSize: '16px',
      '&:hover': {
        cursor: 'pointer'
      }
    },
    lineItem: {
      '& > div': {
        whiteSpace: 'nowrap'
      }
    }
  })
}

type Props = WithStyles<typeof styles>

function Cart({ classes }: Props) {
  const [{ order }, { removeFromOrder }] = useOrder()
  const history = useHistory()
  const copyToClipboard = useClipboard()

  if (order.length === 0) {
    return (
      <Paper className={classes.root}>
        <p>Nothing added to your cart. Please <Link to="/">go back</Link> and add something.</p>
      </Paper>
    )
  }

  const copyClicked = (e: React.MouseEvent<SVGElement>) => {
    e.preventDefault()

    const { currentTarget } = e
    const code = currentTarget.dataset.id
    if (!code) {
      return
    }
    copyToClipboard(code)

    //TODO: Some kind of visual feedback to the user
  }

  const submitOrder = () => {
    const headers = 'Previews Code,Quantity,Title,Price,Publisher,Comment'

    const rows = order.map((i: any) => {
      return [
        i.code,
        i.quantity || 1,
        i.title,
        i.price,
        i.publisher,
        i.comment
      ].join(',')
    })
    const output = [
      headers,
      ...rows,
      `,,Total,${order.reduce((acc: number, curr: any) => acc += parseFloat(curr.price), 0).toFixed(2)}`,
      'Generated by Ace My Order'
    ].join("\n")

    const blob = new Blob([output], { type: "text/csv;charset=utf-8;" })

    const link = document.createElement('a')
    link.href = URL.createObjectURL(blob)
    link.setAttribute('download', 'order.csv')
    link.style.visibility = 'hidden'
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
  }

  return (
    <Paper className={classes.root}>
      <h1>Order Contents</h1>

      <div className={classes.cartTable}>
        <div id={'header'}>
          <div>Previews</div>
          <div>Title</div>
          <div>Price</div>
        </div>
        {order.map((a) => (
          <div key={a.code} className={classes.lineItem}>
            <div>{a.code}
              <AssignmentIcon
                className={classes.copyIcon}
                data-id={a.code}
                onClick={copyClicked}
              />
            </div>
            <div>{a.title}</div>
            <div>{formatAsGBP(a.price).value}</div>
            <div>
              <DeleteIcon
                className={classes.deleteIcon}
                onClick={() => removeFromOrder(a)} />
            </div>
          </div>
        ))}
      </div>

      <div className={classes.buttonRow}>
        <Button variant="contained" color="primary" onClick={() => history.push('/')}>Continue shopping</Button>
        <Button variant="contained" color="secondary" onClick={submitOrder}>Export order</Button>
      </div>
    </Paper>
  )
}

Cart.whyDidYouRender = true

const StyledCart = withStyles(styles, { withTheme: true })(Cart)
export { StyledCart as Cart }
